Name:	Nathan Kong
UID:	204 401 093
TA:	Aishwarya Kamal
File:	key1.txt
Lab Assignment #1

Exercise 1.1: Moving around in Emacs
1. e m a c s SP e x e r 1 . h t m l
2. C-s P U B L I C
3. C-s L a b o r a t o r y
4. C-s s e l f - r e f e r e n t i a l
5. C-s a r r o w
6. C-e
7. C-a
8. (Used commands above)
9. (Used commands above)
10. C-x C-c

Exercise 1.2: Deleting text in Emacs
1. M-g M-g 1 8 Enter C-k
2. C-s D E L E T E M E C-a C-k
3. C-s h t t p s : / / e n C-s C-a C-k C-p C-k C-k C-k C-k
4. C-s < ! - C-b C-b C-b M-z >

Exercise 1.3: Inserting text in Emacs
1. e m a c s SP e x e r 3 . h t m l
2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 3 7 Enter SP .
3. M-% U T F - 8 Enter U S - A S C I I Enter .
4. C-s < / o l > C-a C-o
5. d i f f SP - u SP e x e r 1 . h t m l SP e x e r 3 . h t m l SP > e x e r 3
   . d i f f

Exercise 1.4: Other editing tasks in Emacs
1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l
2. (N/A)
3. M-g M-g 3 5 9 Enter C-f C-SP C-e M-w M-g M-g 1 8 Enter C-y
   M-g M-g 3 6 8 Enter C-f C-SP C-e M-w M-g M-g 9 3 Enter C-y
   M-g M-g 3 7 7 Enter C-SP C-n C-n C-e M-w M-g M-g 3 0 3 Enter C-y C-a C-d C-p
   C-d C-p C-d
   M-g M-g 3 4 0 Enter C-k M-g M-g 3 9 0 Enter C-f C-SP C-e M-w M-g M-g 3 4 0
   Enter C-y
4. (See 3)
5. M-g M-g 3 5 5 Enter C-SP C-x ] DEL
6. C-x u
7. M-g M-g 3 5 5 Enter < ! - - C-x ] - - >
8. M-% < o l > Enter < O l > Enter ! Enter
   7 instances
9. d i f f SP - u e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4
   . d i f f

Exercise 1.5: Doing commands in Emacs
1. M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x d j u n k C-x b h e l l o . c Enter
3. M-x c o m p i l e Enter C-a C-k g c c SP  h e l l o . c SP - o SP h e l l o
   Enter
4. M-! . / h e l l o > h e l l o - o u t Enter
5. M-! c a t SP ~ / D e s k t o p / k e y 1 . t x t SP h e l l o - o u t
   SP > ~ / D e s k t o p / k e y 1 . t x t Enter
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c 
     char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p,
     n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6: Running Elisp code
1. C-x b * s c r a t c h * Enter
2. ( r a n d o m ) C-j
3. ( s e t q SP x ( r a n d o m ) ) C-j ( s e t q SP y ( r a n d o m ) ) C-j
4. ( * SP x SP y ) C-j
   The product of the two numbers is 1740499779700298289.
5. M-: ( * SP x SP y ) Enter
   The output displays more data than the original evaluation method:
   1740499779700298289 (#o140473765177453511061, #x18277f53fcae9231)
6. The numbers are pseudo-random, they are generated using a seed.  If we
   were able to use the same seed then we can manipulate the numbers generated.
7. The randomly generated numbers can be represented using 64-bits, in order
   to have the result to be mathematically correct the two generated numbers
   should have a product which can be represented using 64-bits.  The
   probability that the answer is mathematically correct can be approximated
   by the probability of P(x < 2^32 | y < 2^32).  The probability of the
   result being mathematically correct is very small due to the range of
   numbers which can result in an overflow is a lot larger.
